// <auto-generated />
using System;
using BIMA.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BIMA.Database.Migrations
{
    [DbContext(typeof(BIMADbContext))]
    [Migration("20210425225612_addCourseSectionIdToUsercourseContentTable")]
    partial class addCourseSectionIdToUsercourseContentTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BIMA.Database.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BIMA.Database.Entities.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Capital")
                        .HasColumnType("text");

                    b.Property<string>("Code2")
                        .HasColumnType("text");

                    b.Property<string>("Continent")
                        .HasColumnType("text");

                    b.Property<float>("GNP")
                        .HasColumnType("float");

                    b.Property<float>("GNPOld")
                        .HasColumnType("float");

                    b.Property<string>("GovernmentForm")
                        .HasColumnType("text");

                    b.Property<string>("HeadOfState")
                        .HasColumnType("text");

                    b.Property<int>("IndepYear")
                        .HasColumnType("int");

                    b.Property<float>("LifeExpectancy")
                        .HasColumnType("float");

                    b.Property<string>("LocalName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<float>("SurfaceArea")
                        .HasColumnType("float");

                    b.HasKey("Code");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BIMA.Database.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CoursesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SectionsCount")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalCourseTime")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CourseCategoryId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("BIMA.Database.Entities.CourseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("BIMA.Database.Entities.CourseContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int");

                    b.Property<double>("Duration")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ResourceLocation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseSectionId");

                    b.ToTable("CourseContents");
                });

            modelBuilder.Entity("BIMA.Database.Entities.CourseSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSection");
                });

            modelBuilder.Entity("BIMA.Database.Entities.Footer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsSocialMedia")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("link")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Footers");
                });

            modelBuilder.Entity("BIMA.Database.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "DE",
                            Name = "German"
                        },
                        new
                        {
                            Id = 2,
                            Code = "ENG",
                            Name = "English"
                        });
                });

            modelBuilder.Entity("BIMA.Database.Entities.Navbar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Navbars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Home",
                            LanguageId = 1,
                            Name = "home",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            Label = "Kurse",
                            LanguageId = 1,
                            Name = "courses",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            Label = "Preise",
                            LanguageId = 1,
                            Name = "prices",
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            Label = "Gemeinschaft",
                            LanguageId = 1,
                            Name = "community",
                            Order = 4
                        },
                        new
                        {
                            Id = 5,
                            Label = "Team",
                            LanguageId = 1,
                            Name = "about",
                            Order = 5
                        },
                        new
                        {
                            Id = 6,
                            Label = "Kontakt",
                            LanguageId = 1,
                            Name = "contact",
                            Order = 6
                        });
                });

            modelBuilder.Entity("BIMA.Database.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("BalanceTransactionId")
                        .HasColumnType("text");

                    b.Property<string>("ChargeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("PlanPrice")
                        .HasColumnType("int");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BIMA.Database.Entities.PlanPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PlanPrices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Currency = "chf",
                            Label = "MEMBERSHIP",
                            Name = "membership",
                            Price = 98000
                        },
                        new
                        {
                            Id = 2,
                            Currency = "chf",
                            Label = "ENTERPRISE",
                            Name = "enterprise",
                            Price = 890000
                        },
                        new
                        {
                            Id = 3,
                            Currency = "chf",
                            Label = "BIM 5D MASTER",
                            Name = "bimMaster",
                            Price = 980000
                        });
                });

            modelBuilder.Entity("BIMA.Database.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "df811e72-95fa-4d06-9c3d-0fa7016b1dde",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2L,
                            ConcurrencyStamp = "7d575d43-f590-475a-8785-5b88e1776944",
                            Name = "teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = 3L,
                            ConcurrencyStamp = "6236fa2c-c5cd-46ed-905f-ced532e5d0de",
                            Name = "company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = 4L,
                            ConcurrencyStamp = "72d2f4e3-08e7-4d26-9c62-0f52b0a8fa63",
                            Name = "member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("BIMA.Database.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyUniqueStamp")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Employment")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("Paid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryCode");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            Age = 0,
                            CityId = 201,
                            ConcurrencyStamp = "3478806a-694d-4797-bfcd-69e01d961f6d",
                            CountryCode = "BIH",
                            CreatedDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "amir@digitalbim.academy",
                            EmailConfirmed = true,
                            Employment = "Founder",
                            FirstName = "Amir",
                            Gender = 0,
                            LanguageId = 1,
                            LastName = "Sivic",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMIR@DIGITALBIM.ACADEMY",
                            NormalizedUserName = "AMIR@DIGITALBIM.ACADEMY",
                            Paid = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJc6xurcAX/U6mpwBvPz0nVd9vbGIoxHnHLkS1Wm9ypvrfwaoZCENVDMB5WUnVe2Vw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DMX6IN2LBO4XQWH3TJDFNF7JHRKJFGYY",
                            TwoFactorEnabled = false,
                            UserName = "amir@digitalbim.academy"
                        },
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 0,
                            Age = 0,
                            CityId = 201,
                            ConcurrencyStamp = "a5b45156-8e17-41d9-8a1e-a0b873e61d05",
                            CountryCode = "BIH",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2019),
                            Email = "edince@yopmail.com",
                            EmailConfirmed = true,
                            Employment = "Developer",
                            FirstName = "Edin",
                            Gender = 0,
                            LanguageId = 1,
                            LastName = "Cekic",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDINCE@YOPMAIL.COM",
                            NormalizedUserName = "EDINCE@YOPMAIL.COM",
                            Paid = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEN2WKAeKr1ZcOfZu6fvZK9HZKny7m98AMaPocHSYrrsOMtE6bbhXTsqU2PJqGt6PAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "SHB5H7M27HEOFYXXR4OBYLK3UNQEXFEK",
                            TwoFactorEnabled = false,
                            UserName = "edince@yopmail.com"
                        },
                        new
                        {
                            Id = 3L,
                            AccessFailedCount = 0,
                            Age = 0,
                            CityId = 201,
                            ConcurrencyStamp = "0fb1a022-2065-49d1-9669-c683628b8cca",
                            CountryCode = "BIH",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2019),
                            Email = "anessljivo@gmail.com",
                            EmailConfirmed = true,
                            Employment = "Developer",
                            FirstName = "Anes",
                            Gender = 0,
                            LanguageId = 1,
                            LastName = "Sjivo",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANESSLJIVO@GMAIL.COM",
                            NormalizedUserName = "ANESSLJIVO@GMAIL.COM",
                            Paid = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEC3HvaDc3IXfP+Lsq/iX1exwUoBEAnESEL40NSe0YmmoCY/IQDoFS67q05iG/a4h8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "LSXORV2CHYZQI5US6JHEYB7IJALWABS3",
                            TwoFactorEnabled = false,
                            UserName = "anessljivo@gmail.com"
                        });
                });

            modelBuilder.Entity("BIMA.Database.Entities.UserCourseContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseContentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsWatched")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseContentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserCourseContents");
                });

            modelBuilder.Entity("BIMA.Database.Entities.UserQuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionType = 0,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2,
                            QuestionType = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 3,
                            QuestionType = 2,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 4,
                            QuestionType = 3,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 5,
                            QuestionType = 0,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 6,
                            QuestionType = 1,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7,
                            QuestionType = 2,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 8,
                            QuestionType = 3,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<long>");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            UserId = 1L,
                            RoleId = 2L
                        },
                        new
                        {
                            UserId = 2L,
                            RoleId = 1L
                        },
                        new
                        {
                            UserId = 2L,
                            RoleId = 2L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BIMA.Database.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<long>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("BIMA.Database.Entities.City", b =>
                {
                    b.HasOne("BIMA.Database.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryCode");
                });

            modelBuilder.Entity("BIMA.Database.Entities.Course", b =>
                {
                    b.HasOne("BIMA.Database.Entities.CourseCategory", "CourseCategory")
                        .WithMany("Courses")
                        .HasForeignKey("CourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BIMA.Database.Entities.CourseContent", b =>
                {
                    b.HasOne("BIMA.Database.Entities.CourseSection", null)
                        .WithMany("CourseContents")
                        .HasForeignKey("CourseSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BIMA.Database.Entities.CourseSection", b =>
                {
                    b.HasOne("BIMA.Database.Entities.Course", null)
                        .WithMany("CourseSections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BIMA.Database.Entities.Navbar", b =>
                {
                    b.HasOne("BIMA.Database.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BIMA.Database.Entities.Payment", b =>
                {
                    b.HasOne("BIMA.Database.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BIMA.Database.Entities.User", b =>
                {
                    b.HasOne("BIMA.Database.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BIMA.Database.Entities.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryCode");

                    b.HasOne("BIMA.Database.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BIMA.Database.Entities.UserCourseContent", b =>
                {
                    b.HasOne("BIMA.Database.Entities.CourseContent", null)
                        .WithOne("UserCourseContent")
                        .HasForeignKey("BIMA.Database.Entities.UserCourseContent", "CourseContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BIMA.Database.Entities.User", null)
                        .WithMany("UserCourseContents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BIMA.Database.Entities.UserQuestionType", b =>
                {
                    b.HasOne("BIMA.Database.Entities.User", "User")
                        .WithMany("UserQuestionTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("BIMA.Database.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("BIMA.Database.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("BIMA.Database.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("BIMA.Database.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BIMA.Database.Entities.UserRole", b =>
                {
                    b.HasOne("BIMA.Database.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BIMA.Database.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
